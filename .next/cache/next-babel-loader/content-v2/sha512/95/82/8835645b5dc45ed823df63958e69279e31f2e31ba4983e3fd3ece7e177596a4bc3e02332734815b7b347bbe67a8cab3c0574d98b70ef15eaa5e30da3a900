{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/endrickhoo/Documents/work/lab/reactCourse/meetup/pages/index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nconst HomePage = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}; //this will always run server side\n// export async function getServerSideProps(context) {\n//     //something from nodejs\n//     const req = context.req;\n//     const res = context.res;\n//     return {\n//       props: { meetups: DUMMY_MEETUPS }\n//     };\n// }\n\n\nexport async function getStaticProps() {\n  //instead of fetching from internal API we can also just call it directly from getStaticProps or getServerSideProps\n  //these codes are run in server side, so it is safe\n  const client = await MongoClient.connect(\"mongodb+srv://ekdemoM4ster:wGKChip6aYZaDaoj@cluster0.bj3w0.mongodb.net/ekdemo?authSource=admin&replicaSet=atlas-lry272-shard-0&w=majority&readPreference=primary&appname=MongoDB%20Compass&retryWrites=true&ssl=true\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetups = await meetupCollection.find().toArray();\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString()\n      }))\n    },\n    revalidate: 10 //frequency in SECONDS for server to re-fetch data to hydrate/generate page\n\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["/Users/endrickhoo/Documents/work/lab/reactCourse/meetup/pages/index.js"],"names":["MongoClient","MeetupList","HomePage","props","meetups","getStaticProps","client","connect","db","meetupCollection","collection","find","toArray","close","map","meetup","title","address","image","id","_id","toString","revalidate"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,UAAP,MAAuB,kCAAvB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD,C,CAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA;AAEA,QAAMC,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CACnB,sNADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMN,OAAO,GAAG,MAAMK,gBAAgB,CAACE,IAAjB,GAAwBC,OAAxB,EAAtB;AACAN,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAO;AACLV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAYC,MAAM,KAAK;AAC5BC,QAAAA,KAAK,EAAED,MAAM,CAACC,KADc;AAE5BC,QAAAA,OAAO,EAAEF,MAAM,CAACE,OAFY;AAG5BC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAHc;AAI5BC,QAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX;AAJwB,OAAL,CAAlB;AADJ,KADF;AASLC,IAAAA,UAAU,EAAE,EATP,CASW;;AATX,GAAP;AAWD;AAED,eAAepB,QAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nconst HomePage = (props) => {\n  return <MeetupList meetups={props.meetups} />;\n};\n\n//this will always run server side\n// export async function getServerSideProps(context) {\n//     //something from nodejs\n//     const req = context.req;\n//     const res = context.res;\n\n//     return {\n//       props: { meetups: DUMMY_MEETUPS }\n//     };\n// }\n\nexport async function getStaticProps() {\n  //instead of fetching from internal API we can also just call it directly from getStaticProps or getServerSideProps\n  //these codes are run in server side, so it is safe\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://ekdemoM4ster:wGKChip6aYZaDaoj@cluster0.bj3w0.mongodb.net/ekdemo?authSource=admin&replicaSet=atlas-lry272-shard-0&w=majority&readPreference=primary&appname=MongoDB%20Compass&retryWrites=true&ssl=true\"\n  );\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetups = await meetupCollection.find().toArray();\n  client.close();\n\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n          title: meetup.title,\n          address: meetup.address,\n          image: meetup.image,\n          id: meetup._id.toString(),\n      })),\n    },\n    revalidate: 10, //frequency in SECONDS for server to re-fetch data to hydrate/generate page\n  };\n}\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}