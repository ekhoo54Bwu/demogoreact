{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/endrickhoo/Documents/work/lab/reactCourse/meetup/pages/[meetupId]/index.js\",\n    _this = this;\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nvar MeetupDetails = function MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    address: props.meetupData.address,\n    description: props.meetupData.description,\n    title: props.meetupData.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/endrickhoo/Documents/work/lab/reactCourse/meetup/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails","props","meetupData","image","address","description","title"],"mappings":";;;;;AACA,OAAOA,YAAP,MAAyB,uCAAzB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBE,OAF5B;AAGE,IAAA,WAAW,EAAEH,KAAK,CAACC,UAAN,CAAiBG,WAHhC;AAIE,IAAA,KAAK,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ1B;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CATD;;KAAMN,a;;AAiDN,eAAeA,aAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = (props) => {\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n      title={props.meetupData.title}\n    />\n  );\n};\n\nexport async function getStaticPaths() {\n    const client = await MongoClient.connect(\n      \"mongodb+srv://ekdemoM4ster:wGKChip6aYZaDaoj@cluster0.bj3w0.mongodb.net/ekdemo?authSource=admin&replicaSet=atlas-lry272-shard-0&w=majority&readPreference=primary&appname=MongoDB%20Compass&retryWrites=true&ssl=true\"\n    );\n    const db = client.db();\n    const meetupCollection = db.collection(\"meetups\");\n    const meetups = await meetupCollection.find({}, { _id: 1}).toArray(); //return only id field\n    //const meetups = await meetupCollection.find({}, {}).toArray(); //return everything\n    client.close();\n\n  return {\n    fallback: false, //path not defined will goes to 404, if set to true server will try generate\n    paths: meetups.map(meetup => ({\n        params: {meetupId: meetup._id.toString() },\n    }))\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://ekdemoM4ster:wGKChip6aYZaDaoj@cluster0.bj3w0.mongodb.net/ekdemo?authSource=admin&replicaSet=atlas-lry272-shard-0&w=majority&readPreference=primary&appname=MongoDB%20Compass&retryWrites=true&ssl=true\"\n  );\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupCollection.findOne({ _id: meetupId }); //return only id field  \n  client.close();\n\n  console.log(meetupId);\n\n  return {\n    props: {\n      meetupData: selectedMeetup,\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}