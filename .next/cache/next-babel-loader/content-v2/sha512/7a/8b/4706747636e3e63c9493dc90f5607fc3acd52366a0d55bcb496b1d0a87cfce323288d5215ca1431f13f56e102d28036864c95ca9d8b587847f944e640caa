{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/endrickhoo/Documents/work/lab/reactCourse/meetup/pages/[meetupId]/index.js\";\nimport Head from \"next/head\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: [\"Meet up at \", props.meetupData.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      address: props.meetupData.address,\n      description: props.meetupData.description,\n      title: props.meetupData.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://ekdemoM4ster:wGKChip6aYZaDaoj@cluster0.bj3w0.mongodb.net/ekdemo?authSource=admin&replicaSet=atlas-lry272-shard-0&w=majority&readPreference=primary&appname=MongoDB%20Compass&retryWrites=true&ssl=true\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray(); //return only id field\n  //const meetups = await meetupCollection.find({}, {}).toArray(); //return everything\n\n  client.close();\n  return {\n    fallback: false,\n    //path not defined will goes to 404, if set to true server will try generate\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  const client = await MongoClient.connect(\"mongodb+srv://ekdemoM4ster:wGKChip6aYZaDaoj@cluster0.bj3w0.mongodb.net/ekdemo?authSource=admin&replicaSet=atlas-lry272-shard-0&w=majority&readPreference=primary&appname=MongoDB%20Compass&retryWrites=true&ssl=true\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId)\n  }); //return only id field\n\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        address: selectedMeetup.address,\n        title: selectedMeetup.title,\n        description: selectedMeetup.description,\n        image: selectedMeetup.image\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/endrickhoo/Documents/work/lab/reactCourse/meetup/pages/[meetupId]/index.js"],"names":["Head","MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","title","image","address","description","getStaticPaths","client","connect","db","meetupCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","console","log","selectedMeetup","findOne","id"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE;AAAA,kCAAmBA,KAAK,CAACC,UAAN,CAAiBC,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAD1B;AAEE,MAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAF5B;AAGE,MAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI,WAHhC;AAIE,MAAA,KAAK,EAAEL,KAAK,CAACC,UAAN,CAAiBC;AAJ1B;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAaD,CAdD;;AAgBA,OAAO,eAAeI,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,sNADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAA0B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA1B,EAAsCC,OAAtC,EAAtB,CANqC,CAMkC;AACvE;;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AACY;AACjBC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEA,QAAMf,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,sNADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMiB,cAAc,GAAG,MAAMlB,gBAAgB,CAACmB,OAAjB,CAAyB;AACpDf,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD;AADuC,GAAzB,CAA7B,CAT4C,CAWxC;;AACJf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV6B,QAAAA,EAAE,EAAEF,cAAc,CAACd,GAAf,CAAmBS,QAAnB,EADM;AAEVnB,QAAAA,OAAO,EAAEwB,cAAc,CAACxB,OAFd;AAGVF,QAAAA,KAAK,EAAE0B,cAAc,CAAC1B,KAHZ;AAIVG,QAAAA,WAAW,EAAEuB,cAAc,CAACvB,WAJlB;AAKVF,QAAAA,KAAK,EAAEyB,cAAc,CAACzB;AALZ;AADP;AADF,GAAP;AAWD;AAED,eAAeJ,aAAf","sourcesContent":["import Head from \"next/head\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = (props) => {\n  return (\n    <>\n      <Head>\n        <title>Meet up at {props.meetupData.title}</title>\n      </Head>\n      <MeetupDetail\n        image={props.meetupData.image}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n        title={props.meetupData.title}\n      />\n    </>\n  );\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://ekdemoM4ster:wGKChip6aYZaDaoj@cluster0.bj3w0.mongodb.net/ekdemo?authSource=admin&replicaSet=atlas-lry272-shard-0&w=majority&readPreference=primary&appname=MongoDB%20Compass&retryWrites=true&ssl=true\"\n  );\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetups = await meetupCollection.find({}, { _id: 1 }).toArray(); //return only id field\n  //const meetups = await meetupCollection.find({}, {}).toArray(); //return everything\n  client.close();\n\n  return {\n    fallback: false, //path not defined will goes to 404, if set to true server will try generate\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://ekdemoM4ster:wGKChip6aYZaDaoj@cluster0.bj3w0.mongodb.net/ekdemo?authSource=admin&replicaSet=atlas-lry272-shard-0&w=majority&readPreference=primary&appname=MongoDB%20Compass&retryWrites=true&ssl=true\"\n  );\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId),\n  }); //return only id field\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        address: selectedMeetup.address,\n        title: selectedMeetup.title,\n        description: selectedMeetup.description,\n        image: selectedMeetup.image,\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}